module Euler008 exposing (euler008)


euler008 : String
euler008 =
    let
        dataAsInts =
            data
                |> String.filter (\c -> c /= '\n' && c /= '\x0D')
                |> String.toList
                |> List.map (String.fromChar >> String.toInt >> Result.withDefault 0)
    in
        dataAsInts |> maxProduct 0 |> toString


maxProduct : Int -> List Int -> Int
maxProduct acc ints =
    case ints of
        [ t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13 ] ->
            max (t1 * t2 * t3 * t4 * t5 * t6 * t7 * t8 * t9 * t10 * t11 * t12 * t13) acc

        t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: xs ->
            maxProduct (max (t1 * t2 * t3 * t4 * t5 * t6 * t7 * t8 * t9 * t10 * t11 * t12 * t13) acc) (t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: xs)

        _ ->
            acc


data : String
data =
    """\x0D
73167176531330624919225119674426574742355349194934\x0D
96983520312774506326239578318016984801869478851843\x0D
85861560789112949495459501737958331952853208805511\x0D
12540698747158523863050715693290963295227443043557\x0D
66896648950445244523161731856403098711121722383113\x0D
62229893423380308135336276614282806444486645238749\x0D
30358907296290491560440772390713810515859307960866\x0D
70172427121883998797908792274921901699720888093776\x0D
65727333001053367881220235421809751254540594752243\x0D
52584907711670556013604839586446706324415722155397\x0D
53697817977846174064955149290862569321978468622482\x0D
83972241375657056057490261407972968652414535100474\x0D
82166370484403199890008895243450658541227588666881\x0D
16427171479924442928230863465674813919123162824586\x0D
17866458359124566529476545682848912883142607690042\x0D
24219022671055626321111109370544217506941658960408\x0D
07198403850962455444362981230987879927244284909188\x0D
84580156166097919133875499200524063689912560717606\x0D
05886116467109405077541002256983155200055935729725\x0D
71636269561882670428252483600823257530420752963450\x0D
"""
